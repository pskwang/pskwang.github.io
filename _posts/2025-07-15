# 1. 강의 개요 및 강사 정보

- **강사명:** 정대호
- **강의일:** 2025년 7월 15일 (7.15)
- **연락처:** 010-7682-2520
- **과정명:** 챗GPT를 활용한 자바 스프링 및 데이터 분석 시스템 기반 웹 플랫폼 구축

---

# ✅ 2. 자료 관리 및 저장 체계

## 📁 공유폴더 경로

- 내부 네트워크: http://192.168.56.1:5000/
- 외부 접속: http://220.66.60.101:5000/

## 📂 본인 컴퓨터 저장 구조 (개발자 기준)

```
markdown
복사편집
루트/
└── workspace/
    └── 언어명/
        └── 프로젝트명/

```

## 📄 저장 파일명 규칙

- 형식: `yyyy-mm-dd.md` (예: `2025-07-15.md`)
- 이유: 날짜 기반 버전 관리 및 정렬의 용이성
- 기록 습관 중요!

---

# ✅ 3. 개발 환경 구축

## 🛠️ 필수 개발 도구

### 3-1. 언어 및 실행 환경

- Java 설치
- JDK (Java Development Kit): **자바 프로그램 개발 도구 모음**
- JRE (Java Runtime Environment): **개발된 자바 프로그램 실행 환경**

> 참고: java -version → 자바 버전 확인 (★ 예외적으로 풀네임 사용)
> 

### 3-2. 통합 개발 환경(IDE)

- Eclipse (이클립스)
    
    ↳ *영문 의미: 천체가 가려지는 '식(蝕)' 현상*
    
- IntelliJ (인텔리제이)
- VS Code

> ⚠️ 환경 설정 및 세팅은 초보자에게 어려울 수 있음
> 

---

# ✅ 4. 환경변수 설정

## 🧩 환경변수란?

- 절대경로를 매번 입력하지 않기 위해 설정
- 파일명만 입력해도 어디서든 실행 가능하게 만드는 설정

## 🧭 설정 방법

- **위쪽**: 계정 단위 설정 (개별 사용자)
- **아래쪽**: 시스템 전체 설정 (모든 사용자)

## 📦 중요 폴더

- `bin/` 폴더:
    
    → binary (이진 파일), 컴파일이 완료된 실행 파일 모음 (.exe 포함)
    

## 🔎 참고

- 자바 설치 후 인스톨러가 `PATH` 등록 자동화하지만, **직접 등록해야 안정적**
- 블로그 검색: "자바 path 설정" → 많은 자료 존재

---

# ✅ 5. DUFS 서버 및 Rust 세팅

## 5-1. DUFS 서버

- 웹 기반 파일 공유 서버
- 링크로 파일 공유 가능
- [DUFS GitHub](https://github.com/sigoden/dufs) 참고

## 5-2. Rust 언어

- DUFS 서버는 Rust 언어 기반으로 개발됨
- Rust 설치 및 환경 구성 필요

### ⚙️ 실행 및 저장 팁

- `.exe` 파일 실행 시:
    1. `Alt + D`
    2. `cmd` 입력 후 Enter
- **다른 이름으로 저장**:
    
    `Alt + F + A`
    

---

# ✅ 6. 유용한 유틸리티 - Everything

## 🔍 Everything 기능

- **초고속 검색 툴**
- 내 컴퓨터 안의 모든 파일을 실시간 색인하여 검색
- 설치 및 사용 강력 추천

---

# ✅ 7. 명령어 관례 정리

| 구분 | 예시 | 설명 |
| --- | --- | --- |
| `--` (더블 하이픈) | `--version` | **풀네임 옵션**. 공식적, 명확한 의미 전달 |
| `-` (싱글 하이픈) | `-d`, `-h` | **단축 옵션**. 짧고 간결함 |

https://neofeeli.p-e.kr/archive.html

# ✅ 1. Eclipse 사용 개요

## 1-1. Eclipse란?

- Eclipse는 원래 천문학 용어에서 유래.
- 주로 Java 개발에 사용되는 **통합 개발 환경(IDE)**.

## 1-2. 설치 및 기본 설정

- **설치 권장 버전**:
    
    **Eclipse IDE for Enterprise Java and Web Developers**
    
- **설치 후 워크스페이스 기본 위치**:
    
    `C:\workspace\java`
    
- **웰컴 페이지**는 불필요하므로 닫기

## 1-3. Eclipse 작업 구조

```
markdown
복사편집
워크스페이스
  └─ 프로젝트
       └─ 앱(패키지/클래스 등)

```

- **프로젝트 = 앱 (같은 개념으로 사용)**
- 프로젝트 시작 시 반드시 **폴더 구조 파악**

## 1-4. 단축키 팁

- 주석 처리: `Ctrl + /`

---

# ✅ 2. Java 프로젝트 만들기 (Eclipse 기준)

## 2-1. 새 Java 프로젝트 생성

- 메뉴: `File > New > Java Project`
- 이름 입력 후 `Create module-info.java` 체크 해제

## 2-2. 패키지 및 클래스 생성

- `src` 폴더 안에 `패키지` 추가 (안 만들면 default 패키지 생성됨)
- 패키지 내부에 **클래스 생성**
    - 클래스 이름은 대문자로 시작, **파일명과 같아야 함**

## 2-3. 클래스의 종류

| 클래스 종류 | 설명 |
| --- | --- |
| 실행 클래스 | `main()` 메서드 포함, **단 하나**만 존재 |
| 참조 클래스 | 일반 클래스, 여러 개 생성 가능 |

---

# ✅ 3. Java 문법 기초 개념

## 3-1. 클래스와 객체

- **superclass / 부모 클래스**: 모든 클래스의 최상위는 `Object`
- **subclass / 자식 클래스**: 상속 받는 클래스

## 3-2. 인터페이스 (interface)

- 오직 **추상 메서드**만 포함
- 동일한 목적/기능 강제
- 반드시 **구현 클래스에서 오버라이딩**해야 함

## 3-3. 추상 클래스

- 하나 이상의 추상 메서드를 포함
- **인스턴스화 불가**
- 하위 클래스에서 상속 후 구현 필요

---

# ✅ 4. Java 실행 구조

## 4-1. 실행 메서드

```java
java
복사편집
public static void main(String[] args)

```

- 자바 애플리케이션의 진입점
- `String[] args`: 문자열 배열 매개변수, 이름은 관례적으로 `args` 사용

## 4-2. 명명 규칙 (케이스 스타일)

| 스타일 | 설명 | 예시 |
| --- | --- | --- |
| **카멜 케이스** | 첫 단어 소문자, 이후 단어는 대문자 시작 | `camelCaseStyle` |
| **스네이크 케이스** | 단어 사이 언더바 `_` | `snake_case_style` |
| **케밥 케이스** | 단어 사이 하이픈 `-` (파일명/URL에 주로 사용) | `kebab-case-style` |
| **파스칼 케이스** | 모든 단어의 첫 글자 대문자 | `PascalCaseStyle` |

---

# ✅ 5. 빌드 도구 소개

## 5-1. Maven (메이븐)

- 출시: **2004년**
- 설정: `pom.xml`로 구성
- 기능: 빌드, 문서화, 보고, 의존성 관리
- 장점: 일관된 구조, 외부 라이브러리 통합 용이
- 단점: XML 설정 복잡, 유연성 부족, 느린 빌드 속도

## 5-2. Gradle (그래들)

- 출시: **2009년**
- 설정: **Groovy 또는 Kotlin 기반 DSL**
- 기능: 빌드 캐시, 병렬 실행 → **빠른 빌드**
- 장점: 유연하고 성능 우수, Maven 호환성 우수
- 단점: DSL 익숙하지 않으면 학습 곡선 있음

---

# ✅ 6. 자바 파일 실행 요약 (터미널)

### 예제 구조:

```

C:\workspace\java\first\src\first\First.java

```

### 실행 명령어:

```bash

cd C:\workspace\java\first\src
javac first/First.java
java first.First

```

저장은 Git hub

지킬 frame work

Git  - 협업, 형상 관리, 백업

Git 설치 - 인스톨러 git scm, git bash

라파지토리(저장소)

리모트 레파지토리로 깃허브 서비스이용

로컬 레파지토리는

리모트레파지토리에서 사용자명.github.io

깃 데스크탑 설치 깃을 gui로 다룸

원격지에있는 리모트 레파지토리를 로컬레파지토리로 클로닝 위치 잘 확인

브이에스코드 익스텐션 한글화 ctrl + , , 오토세이브 처리

스테이징 - 나의 코드 변경점을 로컬 레파지토리에 등록

깃 치트시트 확인바람

에드       git add  .

               git push

               git commit